[gd_scene load_steps=3 format=3 uid="uid://ei8wj4mp658l"]

[ext_resource type="Resource" uid="uid://dci855ax4u1qs" path="res://variables.tres" id="1_26omd"]

[sub_resource type="GDScript" id="GDScript_3ibmd"]
script/source = "extends Control


@export var context: QuestographContext


func _ready() -> void:
	#print(context.get_variables())
	#context.set_variables(str_to_var(var_to_str(context.get_variables())))
	#print(context.get_variables())

	__tests()


func __tests() -> void:
	var test_dict: Dictionary = {
		test_bool = true,
		test_int = 99,
		test_float = 9.99,
		test_string = 'string',
		test_dict = {
			value = false,
			type = TYPE_AABB,
			some_var = 888
		}
	}

	context.set_variables(test_dict)
	assert(context.get_variables() == test_dict)
	print_debug('Test set_variables() and get_variables() passed!')

	var fake_dict: Dictionary = {
			value = false,
			type = TYPE_AABB,
			some_var = 888
		}
	context.variables.test_dict = fake_dict
	assert(context.variables.test_dict == fake_dict)
	print_debug('Test set_variable() with fake dict variable passed!')

	context.set_variable('test_int', 999)
	assert(context.get_variable('test_int') == 999)
	print_debug('Test set_variable() and get_variable() passed!')

	assert(context.get_variable_list() as Array == test_dict.keys())
	print_debug('Test get_variable_list() passed!')

	assert(context.get_variable_list([TYPE_FLOAT, TYPE_INT]) == PackedStringArray(['test_int', 'test_float']))
	print_debug('Test filtered get_variable_list() passed!')

	context.erase_variable('test_string')
	context.erase_variable('some_test_string')
	assert(context.has_variable('test_string') == false)
	print_debug('Test remove_variable() and has_variable() passed!')

	context.variables.test_vector2 = Vector2.DOWN
	assert(context.variables.test_vector2 == Vector2.DOWN)
	print_debug('Test adding and reading new variable directly passed!')

	assert(context.variables.test_not_created_variable == false)
	print_debug('Test reading not created variable directly passed!')

	var signal_result: Array = ['', false]
	var on_signal_func: Callable = func(variable, result):
		result.clear()
		result.append(variable)
		result.append(true)
	context.variables.changed.connect(on_signal_func.bind(signal_result), CONNECT_ONE_SHOT)
	context.variables.test_bool = false
	assert(signal_result[0] == 'test_bool' and signal_result[1] == true)
	print_debug('Test variables_changed signal passed!')

	#signal_result = [false]
	#on_signal_func = func(result):
		#result.clear()
		#result.append(true)
	#var variable_object: QuestographContext.Variable = context.variables.get_variable('test_bool', true)
	#if variable_object:
		#variable_object.changed.connect(on_signal_func.bind(signal_result), CONNECT_ONE_SHOT)
	#context.variables.test_bool = true
	#assert(signal_result[0] == true)
	#print_debug('Test variables_changed signal passed!')

	context.clear_variables()
	assert(context.get_variables().is_empty())
	print_debug('Test clear_variables() passed!')
"

[node name="Context" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_3ibmd")
context = ExtResource("1_26omd")
