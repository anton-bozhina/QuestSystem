[gd_scene load_steps=3 format=3 uid="uid://ei8wj4mp658l"]

[ext_resource type="Resource" uid="uid://dtw2f7kbmth53" path="res://variables.tres" id="1_0fqy8"]

[sub_resource type="GDScript" id="GDScript_3ibmd"]
script/source = "extends Control


@export var context: QuestographContext


func _ready() -> void:
	var stored: Dictionary = context.store_context_data()

	print(bytes_to_var_with_objects(stored.nested[1]).store_context_data())
	pass
	#__tests()


func __tests() -> void:
	var start_variables: Dictionary = context.store_context_data()
	print_debug('Start Variables: %s' % start_variables)

	var context_data: Dictionary = {
		'variables': [
			{ 'name': 'string', 'type': 4, 'value': 'test string' },
			{ 'name': 'bool', 'type': 1, 'value': false },
			{ 'name': 'vector3', 'type': 9, 'value': Vector3(1, 2, 3) },
		],
		'nested': []
	}

	context.restore_context_data(context_data)
	print_debug('New Variables: %s' % context.store_context_data())


	assert(context.get_variable('vector3').z == 3)
	assert(context.store_context_data() == context_data)
	print_debug('Test set_variables() and get_variables() passed!')

	context.set_variable('vector3', Vector3.INF)
	assert(context.get_variable('vector3') == Vector3.INF)
	print_debug('Test set_variable() and get_variable() passed!')

	var variable_list: Dictionary = context.get_variable_list()
	assert(variable_list.has('string'))
	assert(variable_list.has('vector3'))
	assert(variable_list.has('bool'))
	print_debug('Test get_variable_list() passed!')

	var filtered_variable_list: Dictionary = context.get_variable_list([TYPE_VECTOR3, TYPE_STRING])
	assert(filtered_variable_list.has('string'))
	assert(filtered_variable_list.has('vector3'))
	assert(filtered_variable_list.size() == 2)
	print_debug('Test filtered get_variable_list() passed!')

	assert(context.get_variable_list([TYPE_INT]) == {})
	print_debug('Test filtered get_variable_list() with not valid types passed!')

	context.set_variable('vector3', true)
	assert(context.get_variable('vector3') == Vector3.ZERO)
	print_debug('Test wrong type in set_variable() passed!')

	var signal_result: Array = ['', false]
	var on_signal_func: Callable = func(variable, result):
		result.clear()
		result.append(variable)
		result.append(true)
	context.variable_changed.connect(on_signal_func.bind(signal_result), CONNECT_ONE_SHOT)
	context.set_variable('bool', false)
	assert(signal_result[0] == &'bool' and signal_result[1] == true)
	print_debug('Test variables_changed signal passed!')

	context_data = {
		'variables': [
			{'name': 'signal', 'type': 26, 'value': [{'name': 'argument', 'type': TYPE_STRING}]}
		],
		'nested': []
	}
	on_signal_func = func(variable, result):
		result.clear()
		result.append(variable)
		result.append(true)

	context.restore_context_data(context_data)
	context.get_signal('signal').connect(on_signal_func.bind(signal_result))

	assert(context.variables.has_signal('signal') == true)
	context.get_signal('signal').emit('test_signal')
	assert(signal_result[0] == 'test_signal' and signal_result[1] == true)
	print_debug('Variable signal passed!')

	print_debug('Final Variables: %s' % context.store_context_data())
"

[node name="Context" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_3ibmd")
context = ExtResource("1_0fqy8")
