[gd_scene load_steps=3 format=3 uid="uid://ei8wj4mp658l"]

[ext_resource type="Resource" uid="uid://dtw2f7kbmth53" path="res://variables.tres" id="1_0fqy8"]

[sub_resource type="GDScript" id="GDScript_3ibmd"]
script/source = "extends Control


@export var context: QuestographContext


func _ready() -> void:
	print(context.get_variable('nested_string'))
	context.set_variable('nested_string', 'LOL KEK')
	print(context.get_variable('nested_string'))
	print(context._cached_data)
	#context._update_cached_data()

	#print(context.variables.str2)
	#context.variables.str22 = {0: 123}
	#print(context.variables.str22)

	#context.test_signal.connect(__tests)
	#context.test_signal.emit()
	#context.connect('test_signal', __tests)
	#context.connect('changed', __tests)

	#context.variables.test
	#print(context.get_variable_list([TYPE_BOOL]))
	#print(context.get_variable('bool_var'))
	#context.set_variable('bool_var', Vector2.ZERO)
	#print(context.get_variable('bool_var'))
	#context.set_variables(str_to_var(var_to_str(context.get_variables())))
	#print(context.variables)
	#pass
	__tests()


func __tests() -> void:
	var start_variables: Dictionary = context.store_variable_data()
	print_debug('Start Variables: %s' % start_variables)

	var new_variables: Dictionary = {
		'string': { 'name': 'string', 'type': 4, 'value': 'test string' },
		'bool': { 'name': 'bool', 'type': 1, 'value': false },
		'vector3': { 'name': 'vector3', 'type': 9, 'value': Vector3(1, 2, 3) },
	}

	context.restore_variable_data(new_variables)
	print_debug('New Variables: %s' % context.store_variable_data())


	assert(context.get_variable('vector3').z == 3)
	assert(context.store_variable_data() == new_variables)
	print_debug('Test set_variables() and get_variables() passed!')
#
	context.set_variable('vector3', Vector3.INF)
	assert(context.get_variable('vector3') == Vector3.INF)
	print_debug('Test set_variable() and get_variable() passed!')
#
	var variable_list: Dictionary = context.get_variable_list()
	assert(variable_list.has('string'))
	assert(variable_list.has('vector3'))
	assert(variable_list.has('bool'))
	#assert(variable_list.size() == 3)
	print_debug('Test get_variable_list() passed!')

	var filtered_variable_list: Dictionary = context.get_variable_list([TYPE_VECTOR3, TYPE_STRING])
	assert(filtered_variable_list.has('string'))
	assert(filtered_variable_list.has('vector3'))
	assert(filtered_variable_list.size() == 2)
	print_debug('Test filtered get_variable_list() passed!')

	assert(context.get_variable_list([TYPE_INT]) == {})
	print_debug('Test filtered get_variable_list() with not valid types passed!')

	context.set_variable('vector3', true)
	assert(context.get_variable('vector3') == Vector3.ZERO)
	print_debug('Test wrong type in set_variable() passed!')

	var signal_result: Array = ['', false]
	var on_signal_func: Callable = func(variable, result):
		result.clear()
		result.append(variable)
		result.append(true)
	context.variable_changed.connect(on_signal_func.bind(signal_result), CONNECT_ONE_SHOT)
	context.set_variable('bool', false)
	assert(signal_result[0] == &'bool' and signal_result[1] == true)
	print_debug('Test variables_changed signal passed!')

	context.restore_variable_data({
		'signal': {'name': 'signal', 'type': 26, 'value': null }
	})

	#context.variables.signal.connect(_test_sig)
	context.get_signal('signal').connect(_test_sig)

	printt('signal', context.get_signal('signal').get_connections())
	printt('signal', context.has_signal('signal'))

	context.get_signal('signal').emit()

	print_debug('Final Variables: %s' % context.store_variable_data())


func _test_sig() -> void:
	print('SIGNAL!')
"

[node name="Context" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_3ibmd")
context = ExtResource("1_0fqy8")
